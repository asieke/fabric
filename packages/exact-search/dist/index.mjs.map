{"version":3,"sources":["../src/search.ts"],"sourcesContent":["type Params = {\n  data: Record<string, any>[];\n  indexFields: string[];\n  resultFields: string[];\n};\n\nexport type Result = {\n  match: Record<string, string> | null;\n  score: number;\n  [key: string]: any;\n};\n\nexport class Search {\n  private data: Record<string, any>[];\n  private indexFields: string[];\n  private resultFields: string[];\n\n  constructor({ data, indexFields, resultFields }: Params) {\n    this.data = data;\n    this.indexFields = indexFields;\n    this.resultFields = resultFields;\n  }\n\n  public search(query: string, limit: number = 10) {\n    const results: Result[] = [];\n\n    this.data.forEach((item: any) => {\n      let temp: Result = { match: null, score: 0 };\n      this.indexFields.forEach((field: string) => {\n        // Use a regular expression to find the query at the start of a token (word)\n        const regex = new RegExp(`\\\\b${query}`, 'i');\n        const match = item[field].match(regex);\n\n        if (match) {\n          const startIndex = match.index!;\n          const count = item[field].toLowerCase().split(regex).length - 1;\n          const words = item[field].split(' ').length;\n\n          this.resultFields.forEach((resultField: string) => {\n            temp[resultField] = item[resultField];\n          });\n          // get a substring that is the query and the subsequent 20 characters\n          const substr = item[field].substring(startIndex, startIndex + 30);\n          temp.match = { ...temp.match, [field]: substr };\n          temp.score += count / words;\n        }\n      });\n      if (temp.match) {\n        results.push(temp);\n      }\n    });\n\n    results.sort((a, b) => b.score - a.score);\n\n    if (results.length > limit) {\n      return results.slice(0, limit);\n    }\n\n    return results;\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAYO,IAAM,SAAN,MAAa;AAAA,EAKlB,YAAY,EAAE,MAAM,aAAa,aAAa,GAAW;AACvD,SAAK,OAAO;AACZ,SAAK,cAAc;AACnB,SAAK,eAAe;AAAA,EACtB;AAAA,EAEO,OAAO,OAAe,QAAgB,IAAI;AAC/C,UAAM,UAAoB,CAAC;AAE3B,SAAK,KAAK,QAAQ,CAAC,SAAc;AAC/B,UAAI,OAAe,EAAE,OAAO,MAAM,OAAO,EAAE;AAC3C,WAAK,YAAY,QAAQ,CAAC,UAAkB;AAE1C,cAAM,QAAQ,IAAI,OAAO,MAAM,KAAK,IAAI,GAAG;AAC3C,cAAM,QAAQ,KAAK,KAAK,EAAE,MAAM,KAAK;AAErC,YAAI,OAAO;AACT,gBAAM,aAAa,MAAM;AACzB,gBAAM,QAAQ,KAAK,KAAK,EAAE,YAAY,EAAE,MAAM,KAAK,EAAE,SAAS;AAC9D,gBAAM,QAAQ,KAAK,KAAK,EAAE,MAAM,GAAG,EAAE;AAErC,eAAK,aAAa,QAAQ,CAAC,gBAAwB;AACjD,iBAAK,WAAW,IAAI,KAAK,WAAW;AAAA,UACtC,CAAC;AAED,gBAAM,SAAS,KAAK,KAAK,EAAE,UAAU,YAAY,aAAa,EAAE;AAChE,eAAK,QAAQ,iCAAK,KAAK,QAAV,EAAiB,CAAC,KAAK,GAAG,OAAO;AAC9C,eAAK,SAAS,QAAQ;AAAA,QACxB;AAAA,MACF,CAAC;AACD,UAAI,KAAK,OAAO;AACd,gBAAQ,KAAK,IAAI;AAAA,MACnB;AAAA,IACF,CAAC;AAED,YAAQ,KAAK,CAAC,GAAG,MAAM,EAAE,QAAQ,EAAE,KAAK;AAExC,QAAI,QAAQ,SAAS,OAAO;AAC1B,aAAO,QAAQ,MAAM,GAAG,KAAK;AAAA,IAC/B;AAEA,WAAO;AAAA,EACT;AACF;","names":[]}