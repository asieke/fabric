{"version":3,"sources":["../src/search.ts"],"sourcesContent":["type Params = {\n  data: Record<string, any>[];\n  indexFields: string[];\n  indexWeights: number[];\n  resultFields: string[];\n};\n\ntype Result = {\n  match: Record<string, string> | null;\n  score: number;\n  count: Record<string, number> | null;\n  [key: string]: any;\n};\n\nclass Search {\n  private data: Record<string, any>[];\n  private indexFields: string[];\n  private resultFields: string[];\n  private indexWeights: number[];\n\n  constructor({ data, indexFields, resultFields, indexWeights = [] }: Params) {\n    this.data = data;\n    this.indexFields = indexFields;\n    this.resultFields = resultFields;\n    this.indexWeights =\n      indexWeights.length > 0 ? indexWeights : new Array(indexFields.length).fill(1);\n  }\n\n  public search(query: string) {\n    const results: Result[] = [];\n\n    this.data.forEach((item: any) => {\n      let temp: Result = { match: null, score: 0, count: null };\n      this.indexFields.forEach((field: string, i) => {\n        const startIndex = item[field].toLowerCase().indexOf(query.toLowerCase());\n        if (startIndex !== -1) {\n          const count = item[field].toLowerCase().split(query.toLowerCase()).length - 1;\n          const words = item[field].split(' ').length;\n\n          this.resultFields.forEach((resultField: string) => {\n            temp[resultField] = item[resultField];\n          });\n          // get a subtring that is the query and the subsequent 20 characters\n          const substr = item[field].substring(startIndex, startIndex + 20);\n          temp.match = { ...temp.match, [field]: substr };\n          temp.score += count / words;\n          temp.count = { ...temp.count, [field]: count / words };\n        }\n      });\n      if (temp.match) {\n        results.push(temp);\n      }\n    });\n\n    results.sort((a, b) => b.score - a.score);\n\n    return results;\n  }\n}\n\nexport default Search;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAcA,IAAM,SAAN,MAAa;AAAA,EAMX,YAAY,EAAE,MAAM,aAAa,cAAc,eAAe,CAAC,EAAE,GAAW;AAC1E,SAAK,OAAO;AACZ,SAAK,cAAc;AACnB,SAAK,eAAe;AACpB,SAAK,eACH,aAAa,SAAS,IAAI,eAAe,IAAI,MAAM,YAAY,MAAM,EAAE,KAAK,CAAC;AAAA,EACjF;AAAA,EAEO,OAAO,OAAe;AAC3B,UAAM,UAAoB,CAAC;AAE3B,SAAK,KAAK,QAAQ,CAAC,SAAc;AAC/B,UAAI,OAAe,EAAE,OAAO,MAAM,OAAO,GAAG,OAAO,KAAK;AACxD,WAAK,YAAY,QAAQ,CAAC,OAAe,MAAM;AAC7C,cAAM,aAAa,KAAK,KAAK,EAAE,YAAY,EAAE,QAAQ,MAAM,YAAY,CAAC;AACxE,YAAI,eAAe,IAAI;AACrB,gBAAM,QAAQ,KAAK,KAAK,EAAE,YAAY,EAAE,MAAM,MAAM,YAAY,CAAC,EAAE,SAAS;AAC5E,gBAAM,QAAQ,KAAK,KAAK,EAAE,MAAM,GAAG,EAAE;AAErC,eAAK,aAAa,QAAQ,CAAC,gBAAwB;AACjD,iBAAK,WAAW,IAAI,KAAK,WAAW;AAAA,UACtC,CAAC;AAED,gBAAM,SAAS,KAAK,KAAK,EAAE,UAAU,YAAY,aAAa,EAAE;AAChE,eAAK,QAAQ,iCAAK,KAAK,QAAV,EAAiB,CAAC,KAAK,GAAG,OAAO;AAC9C,eAAK,SAAS,QAAQ;AACtB,eAAK,QAAQ,iCAAK,KAAK,QAAV,EAAiB,CAAC,KAAK,GAAG,QAAQ,MAAM;AAAA,QACvD;AAAA,MACF,CAAC;AACD,UAAI,KAAK,OAAO;AACd,gBAAQ,KAAK,IAAI;AAAA,MACnB;AAAA,IACF,CAAC;AAED,YAAQ,KAAK,CAAC,GAAG,MAAM,EAAE,QAAQ,EAAE,KAAK;AAExC,WAAO;AAAA,EACT;AACF;AAEA,IAAO,iBAAQ;","names":[]}